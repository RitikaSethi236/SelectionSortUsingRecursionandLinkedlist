#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
struct node
{
int data;
struct node *next;
};
struct node *head,*n;
void insert()
{
int y;
struct node *ptr;
ptr=head;
printf("Enter the value of new node:");
scanf("%d",&y);
n=(struct node *)malloc(sizeof(struct node));
n->data=y;
if(head==NULL)
{
n->next=NULL;
head=n;
}
else
{
while(ptr->next!=NULL)
{
ptr=ptr->next;
}
n->next=NULL;
ptr->next=n;
}
}
void traverse()
{
struct node *ptr;
ptr=head;
if(head==NULL)
{
printf("List is Empty");
getch();
}
else
{
while(ptr!=NULL)
{
printf("%d-> ",ptr->data);
ptr=ptr->next;
}
getch();
}
}
void sorted(int i, int n)
{
int j,t,k,w;
struct node *temp,*min,*ptr;
w=i;
if(i==n)
{
return;
}
min=head;
temp=head;
while(w>1)
{
temp=temp->next;
min=min->next;
w--;
}
for(j=i+1;j<=n;j++)
{
k=j;
ptr=head;
while(k>1)
{
ptr=ptr->next;
k--;
}
if(min->data>ptr->data)
{
min=ptr;
}
}
if(min!=temp)
{
t=min->data;
min->data=temp->data;
temp->data=t;
}
sorted(i+1,n);
}
void sorting()
{
struct node *ptr;
ptr=head;
int t=0;
if(head==NULL)
{
printf("List is empty");
getch();
}
else
{
while(ptr!=NULL)
{
ptr=ptr->next;
t=t+1;
}
sorted(1,t);
}
}
void main()
{
int choice;
L:system("cls");
printf("\n 1. Insertion\n ");
printf("\n 2. Traversal\n");
printf("\n 3. Sorting\n");
printf("\n 4. Exit\n");
printf("\n Enter your choice:");
scanf("%d",&choice);
switch(choice)
{
case 1: insert();
goto L;
case 2: traverse();
goto L;
case 3: sorting();
goto L;
case 4: exit(0);
default: printf("Invalid choice");
getch();
goto L;
}
}
